# Шаг 1: Определяем класс `Order`, который будет использоваться для создания объектов заказов.
# Каждый объект `Order` будет хранить информацию о названии блюда и времени его приготовления.
class Order:
    # Шаг 2: Определяем метод-конструктор `__init__`, который вызывается при создании нового объекта класса `Order`.
    # Этот метод принимает три аргумента: `self` (ссылка на создаваемый объект), `name` (название блюда) и `time` (время приготовления).
    def __init__(self, name, time):
        # Присваиваем значения аргументов `name` и `time` атрибутам объекта.
        self.name = name
        self.time = time

    # Шаг 3: Определяем метод `check`, который будет анализировать время приготовления заказа.
    # Метод возвращает строку, в зависимости от того, меньше или равно ли время 5 минут.
    def check(self):
        if self.time <= 5:
            return "Ваш заказ приготовится быстро!"  # Если время приготовления 5 минут или меньше
        else:
            return "Ваш заказ готовится долго..."  # Если время приготовления больше 5 минут


# Шаг 4: Определяем функцию `take_order`, которая будет принимать заказ от пользователя.
# Эта функция создаёт объект `Order` на основе данных, введённых пользователем, и выводит результат проверки времени приготовления.
def take_order():
    # Запрашиваем у пользователя название блюда и сохраняем его в переменную `name`.
    name = input("Введите название блюда: ")

    # Запрашиваем у пользователя время приготовления и сохраняем его в переменную `time`.
    # Так как `input()` возвращает строку, мы используем `int()`, чтобы преобразовать её в целое число.
    time = int(input("Сколько минут это займет? "))

    # Создаем объект `Order` с полученными от пользователя данными.
    order = Order(name, time)

    # Вызываем метод `check` для объекта `order` и выводим результат на экран.
    print(order.check())


# Шаг 5: Вызываем функцию `take_order`, чтобы начать процесс принятия заказа.
take_order()
